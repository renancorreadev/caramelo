// source: nft.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.nft_manager.BuyNFTRequest', null, global);
goog.exportSymbol('proto.nft_manager.BuyNFTResponse', null, global);
goog.exportSymbol('proto.nft_manager.GetInfoNFTRequest', null, global);
goog.exportSymbol('proto.nft_manager.GetInfoNFTResponse', null, global);
goog.exportSymbol('proto.nft_manager.GetNFTsForSaleRequest', null, global);
goog.exportSymbol('proto.nft_manager.GetNFTsForSaleResponse', null, global);
goog.exportSymbol('proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest', null, global);
goog.exportSymbol('proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse', null, global);
goog.exportSymbol('proto.nft_manager.SendTransactionNFTRequest', null, global);
goog.exportSymbol('proto.nft_manager.SendTransactionNFTResponse', null, global);
goog.exportSymbol('proto.nft_manager.SetNFTForSaleRequest', null, global);
goog.exportSymbol('proto.nft_manager.SetNFTForSaleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.GetInfoNFTRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.GetInfoNFTRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.GetInfoNFTRequest.displayName = 'proto.nft_manager.GetInfoNFTRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.GetInfoNFTResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.GetInfoNFTResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.GetInfoNFTResponse.displayName = 'proto.nft_manager.GetInfoNFTResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.SendTransactionNFTRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.SendTransactionNFTRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.SendTransactionNFTRequest.displayName = 'proto.nft_manager.SendTransactionNFTRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.SendTransactionNFTResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.SendTransactionNFTResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.SendTransactionNFTResponse.displayName = 'proto.nft_manager.SendTransactionNFTResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.GetNFTsForSaleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.GetNFTsForSaleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.GetNFTsForSaleRequest.displayName = 'proto.nft_manager.GetNFTsForSaleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.GetNFTsForSaleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.GetNFTsForSaleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.GetNFTsForSaleResponse.displayName = 'proto.nft_manager.GetNFTsForSaleResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.displayName = 'proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.displayName = 'proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.BuyNFTRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.BuyNFTRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.BuyNFTRequest.displayName = 'proto.nft_manager.BuyNFTRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.BuyNFTResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.BuyNFTResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.BuyNFTResponse.displayName = 'proto.nft_manager.BuyNFTResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.SetNFTForSaleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.SetNFTForSaleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.SetNFTForSaleRequest.displayName = 'proto.nft_manager.SetNFTForSaleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nft_manager.SetNFTForSaleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nft_manager.SetNFTForSaleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nft_manager.SetNFTForSaleResponse.displayName = 'proto.nft_manager.SetNFTForSaleResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.GetInfoNFTRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.GetInfoNFTRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.GetInfoNFTRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetInfoNFTRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    network: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.GetInfoNFTRequest}
 */
proto.nft_manager.GetInfoNFTRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.GetInfoNFTRequest;
  return proto.nft_manager.GetInfoNFTRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.GetInfoNFTRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.GetInfoNFTRequest}
 */
proto.nft_manager.GetInfoNFTRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.GetInfoNFTRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.GetInfoNFTRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.GetInfoNFTRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetInfoNFTRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.nft_manager.GetInfoNFTRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetInfoNFTRequest} returns this
 */
proto.nft_manager.GetInfoNFTRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contractAddress = 2;
 * @return {string}
 */
proto.nft_manager.GetInfoNFTRequest.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetInfoNFTRequest} returns this
 */
proto.nft_manager.GetInfoNFTRequest.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string network = 3;
 * @return {string}
 */
proto.nft_manager.GetInfoNFTRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetInfoNFTRequest} returns this
 */
proto.nft_manager.GetInfoNFTRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tokenId = 4;
 * @return {string}
 */
proto.nft_manager.GetInfoNFTRequest.prototype.getTokenid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetInfoNFTRequest} returns this
 */
proto.nft_manager.GetInfoNFTRequest.prototype.setTokenid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.GetInfoNFTResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.GetInfoNFTResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.GetInfoNFTResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetInfoNFTResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nft: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.GetInfoNFTResponse}
 */
proto.nft_manager.GetInfoNFTResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.GetInfoNFTResponse;
  return proto.nft_manager.GetInfoNFTResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.GetInfoNFTResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.GetInfoNFTResponse}
 */
proto.nft_manager.GetInfoNFTResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.GetInfoNFTResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.GetInfoNFTResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.GetInfoNFTResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetInfoNFTResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNft();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nft = 1;
 * @return {string}
 */
proto.nft_manager.GetInfoNFTResponse.prototype.getNft = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetInfoNFTResponse} returns this
 */
proto.nft_manager.GetInfoNFTResponse.prototype.setNft = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.SendTransactionNFTRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.SendTransactionNFTRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SendTransactionNFTRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    twofactorauthenticationcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transaction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    network: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.SendTransactionNFTRequest}
 */
proto.nft_manager.SendTransactionNFTRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.SendTransactionNFTRequest;
  return proto.nft_manager.SendTransactionNFTRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.SendTransactionNFTRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.SendTransactionNFTRequest}
 */
proto.nft_manager.SendTransactionNFTRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwofactorauthenticationcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.SendTransactionNFTRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.SendTransactionNFTRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SendTransactionNFTRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTwofactorauthenticationcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTokenid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string pubKey = 1;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTRequest} returns this
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string twoFactorAuthenticationCode = 2;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.getTwofactorauthenticationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTRequest} returns this
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.setTwofactorauthenticationcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transaction = 3;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTRequest} returns this
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contractAddress = 4;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTRequest} returns this
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string network = 5;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTRequest} returns this
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tokenId = 6;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.getTokenid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTRequest} returns this
 */
proto.nft_manager.SendTransactionNFTRequest.prototype.setTokenid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.SendTransactionNFTResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.SendTransactionNFTResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.SendTransactionNFTResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SendTransactionNFTResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.SendTransactionNFTResponse}
 */
proto.nft_manager.SendTransactionNFTResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.SendTransactionNFTResponse;
  return proto.nft_manager.SendTransactionNFTResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.SendTransactionNFTResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.SendTransactionNFTResponse}
 */
proto.nft_manager.SendTransactionNFTResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.SendTransactionNFTResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.SendTransactionNFTResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.SendTransactionNFTResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SendTransactionNFTResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transaction = 1;
 * @return {string}
 */
proto.nft_manager.SendTransactionNFTResponse.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SendTransactionNFTResponse} returns this
 */
proto.nft_manager.SendTransactionNFTResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.GetNFTsForSaleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.GetNFTsForSaleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.GetNFTsForSaleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetNFTsForSaleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.GetNFTsForSaleRequest}
 */
proto.nft_manager.GetNFTsForSaleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.GetNFTsForSaleRequest;
  return proto.nft_manager.GetNFTsForSaleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.GetNFTsForSaleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.GetNFTsForSaleRequest}
 */
proto.nft_manager.GetNFTsForSaleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.GetNFTsForSaleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.GetNFTsForSaleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.GetNFTsForSaleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetNFTsForSaleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contractAddress = 1;
 * @return {string}
 */
proto.nft_manager.GetNFTsForSaleRequest.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetNFTsForSaleRequest} returns this
 */
proto.nft_manager.GetNFTsForSaleRequest.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network = 2;
 * @return {string}
 */
proto.nft_manager.GetNFTsForSaleRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetNFTsForSaleRequest} returns this
 */
proto.nft_manager.GetNFTsForSaleRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.GetNFTsForSaleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.GetNFTsForSaleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.GetNFTsForSaleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetNFTsForSaleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nftdatalist: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.GetNFTsForSaleResponse}
 */
proto.nft_manager.GetNFTsForSaleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.GetNFTsForSaleResponse;
  return proto.nft_manager.GetNFTsForSaleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.GetNFTsForSaleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.GetNFTsForSaleResponse}
 */
proto.nft_manager.GetNFTsForSaleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNftdatalist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.GetNFTsForSaleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.GetNFTsForSaleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.GetNFTsForSaleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetNFTsForSaleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNftdatalist();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nftDataList = 1;
 * @return {string}
 */
proto.nft_manager.GetNFTsForSaleResponse.prototype.getNftdatalist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetNFTsForSaleResponse} returns this
 */
proto.nft_manager.GetNFTsForSaleResponse.prototype.setNftdatalist = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, ""),
    from: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest;
  return proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contractAddress = 1;
 * @return {string}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest} returns this
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network = 2;
 * @return {string}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest} returns this
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string from = 3;
 * @return {string}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest} returns this
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nftdatalist: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse;
  return proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNftdatalist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNftdatalist();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string nftDataList = 1;
 * @return {string}
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.prototype.getNftdatalist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse} returns this
 */
proto.nft_manager.GetTokenMetadataUrlsOwnedByAddressResponse.prototype.setNftdatalist = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.BuyNFTRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.BuyNFTRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.BuyNFTRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.BuyNFTRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    twofactorauthenticationcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transaction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    network: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.BuyNFTRequest}
 */
proto.nft_manager.BuyNFTRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.BuyNFTRequest;
  return proto.nft_manager.BuyNFTRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.BuyNFTRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.BuyNFTRequest}
 */
proto.nft_manager.BuyNFTRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwofactorauthenticationcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.BuyNFTRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.BuyNFTRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.BuyNFTRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.BuyNFTRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTwofactorauthenticationcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTokenid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string pubKey = 1;
 * @return {string}
 */
proto.nft_manager.BuyNFTRequest.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTRequest} returns this
 */
proto.nft_manager.BuyNFTRequest.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string twoFactorAuthenticationCode = 2;
 * @return {string}
 */
proto.nft_manager.BuyNFTRequest.prototype.getTwofactorauthenticationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTRequest} returns this
 */
proto.nft_manager.BuyNFTRequest.prototype.setTwofactorauthenticationcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transaction = 3;
 * @return {string}
 */
proto.nft_manager.BuyNFTRequest.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTRequest} returns this
 */
proto.nft_manager.BuyNFTRequest.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contractAddress = 4;
 * @return {string}
 */
proto.nft_manager.BuyNFTRequest.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTRequest} returns this
 */
proto.nft_manager.BuyNFTRequest.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string network = 5;
 * @return {string}
 */
proto.nft_manager.BuyNFTRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTRequest} returns this
 */
proto.nft_manager.BuyNFTRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tokenId = 6;
 * @return {string}
 */
proto.nft_manager.BuyNFTRequest.prototype.getTokenid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTRequest} returns this
 */
proto.nft_manager.BuyNFTRequest.prototype.setTokenid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.BuyNFTResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.BuyNFTResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.BuyNFTResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.BuyNFTResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.BuyNFTResponse}
 */
proto.nft_manager.BuyNFTResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.BuyNFTResponse;
  return proto.nft_manager.BuyNFTResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.BuyNFTResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.BuyNFTResponse}
 */
proto.nft_manager.BuyNFTResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.BuyNFTResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.BuyNFTResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.BuyNFTResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.BuyNFTResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transaction = 1;
 * @return {string}
 */
proto.nft_manager.BuyNFTResponse.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.BuyNFTResponse} returns this
 */
proto.nft_manager.BuyNFTResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.SetNFTForSaleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.SetNFTForSaleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SetNFTForSaleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    twofactorauthenticationcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transaction: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    network: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tokenid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.SetNFTForSaleRequest}
 */
proto.nft_manager.SetNFTForSaleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.SetNFTForSaleRequest;
  return proto.nft_manager.SetNFTForSaleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.SetNFTForSaleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.SetNFTForSaleRequest}
 */
proto.nft_manager.SetNFTForSaleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwofactorauthenticationcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.SetNFTForSaleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.SetNFTForSaleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SetNFTForSaleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTwofactorauthenticationcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTokenid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string pubKey = 1;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleRequest} returns this
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string twoFactorAuthenticationCode = 2;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.getTwofactorauthenticationcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleRequest} returns this
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.setTwofactorauthenticationcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transaction = 3;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleRequest} returns this
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contractAddress = 4;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleRequest} returns this
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string network = 5;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleRequest} returns this
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tokenId = 6;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.getTokenid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleRequest} returns this
 */
proto.nft_manager.SetNFTForSaleRequest.prototype.setTokenid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nft_manager.SetNFTForSaleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nft_manager.SetNFTForSaleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nft_manager.SetNFTForSaleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SetNFTForSaleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nft_manager.SetNFTForSaleResponse}
 */
proto.nft_manager.SetNFTForSaleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nft_manager.SetNFTForSaleResponse;
  return proto.nft_manager.SetNFTForSaleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nft_manager.SetNFTForSaleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nft_manager.SetNFTForSaleResponse}
 */
proto.nft_manager.SetNFTForSaleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nft_manager.SetNFTForSaleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nft_manager.SetNFTForSaleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nft_manager.SetNFTForSaleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nft_manager.SetNFTForSaleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string transaction = 1;
 * @return {string}
 */
proto.nft_manager.SetNFTForSaleResponse.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nft_manager.SetNFTForSaleResponse} returns this
 */
proto.nft_manager.SetNFTForSaleResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.nft_manager);
